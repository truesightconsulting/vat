dupe.max[i,]=dupe.m2[i,]
dupe.max[i,][index]=dupe.m1[i,][index]
}
dupe.final=dupe.min+dupe.m3*(dupe.max-dupe.min)
dupe.final=cbind(dupe$Media,dupe.final)
colnames(dupe.final)[1]="Media"
# for output
for.output=data.frame(final[,c("Media","sp_adj","allo","r_grs","r_net_adj","grp"),with=F])
# several adjustments for two channel scenario
r_n=for.output$r_grs
if(sum(r_n!=0)==2){
index=dupe.final[,-1]!=0
index[is.na(index)]=F
r_dupe_adj_total=as.numeric(dupe.final[,-1][(!is.na(dupe.final[,-1]))&index])
r_net_adj_total=sum(for.output$r_grs)-r_dupe_adj_total
for.output$r_net_adj[r_n!=0]=for.output$r_grs[r_n!=0]-r_dupe_adj_total
}
x=c("Total",apply(for.output[,-1],2,sum))
x[names(for.output)=="r_net_adj"]=r_net_adj_total
for.output=rbind(for.output,c("All other duplicated reach",c("","","",r_dupe_adj_total,"")))
for.output=rbind(for.output,x)
names(for.output)=c("Media","Budget","Allocation","Gross reach","Net reach","Total 30s GRPs")
for.output.t=data.frame(t(for.output))
names(for.output.t)=for.output$Media
for.output.t=data.frame(for.output.t[dupe.final[,"Media"]],for.output.t[c("All other duplicated reach","Total")])
end=Sys.time()-start
print(paste("Modeling time: ",round(end[[1]],digit=2),attr(end,"units"),sep=""))
write.table(for.output.t,"output_alloc_net_net.csv",col.names = F,sep=",")
write.csv(dupe.final,"output_dupe_net_net.csv",row.names=F)
View(for.output.t)
#######################################################################################
# Load in setup files
#######################################################################################
setwd("d:\\VAT Optimizer\\code\\s curve optm\\")
start=Sys.time()
print("Optimization Initialization")
library(data.table);library(reshape)
max.level=1e+10 # max constrain if missing
ex.curve=fread("modelinput_curves.csv")
ex.budget=fread("input_budget.csv")
ex.min=fread("input_constrain_min.csv")
ex.max=fread("input_constrain_max.csv")
ex.aud=fread("input_audience.csv")
ex.freq=fread("input_freq.csv")
ex.media=fread("input_media.csv")
ex.cpp=fread("modelinput_cpp.csv")
ex.shell=fread("modelinput_shell.csv")
ex.shell.rollup=fread("modelinput_shell_rollup.csv")
ex.dupe=fread("input_dupefactor.csv")
#######################################################################################
# OPTM initialization
#######################################################################################
budget=ex.budget$Budget
# merge all the info with curve
curve=merge(ex.curve,ex.cpp[,c("aud_num","media_num","cpp"),with=F],
by=c("aud_num","media_num"),all.x=T)
curve=merge(curve,ex.media[,c("media_num","flag_media"),with=F],
by=c("media_num"),all.x=T)
curve=merge(curve,ex.freq[,c("freq_num","flag_freq"),with=F],
by=c("freq_num"),all.x=T)
curve=merge(curve,ex.aud[,c("aud_num","flag_aud"),with=F],
by=c("aud_num"),all.x=T)
# filter out non-selected curves
flag=curve$flag_aud+curve$flag_media+curve$flag_freq
curve=curve[flag==3,]
# create some varaibles for optm
curve$r_grs=curve$r_net=curve$sp_next=curve$r_grs_next=rep(0,nrow(curve))
curve$g1=curve$g/curve$cpp
curve$inf_point1=curve$inf_point/curve$cpp
# filter out non-selected shell
index=ex.shell$shell_num %in% curve$shell_num
shell=ex.shell[index,]
# merge shell with min and max
ex.max$max_spend[is.na(ex.max$max_spend)]=max.level
ex.min$min_spend[is.na(ex.min$min_spend)]=0
shell=merge(shell,ex.max[,c("shell_num","max_spend"),with=F],
by="shell_num",all.x=T)
shell=merge(shell,ex.min[,c("shell_num","min_spend"),with=F],
by="shell_num",all.x=T)
# calc max spend from max reach
curve$max_reach[is.na(curve$max_reach)]=curve$k[is.na(curve$max_reach)]
max_reach_sp=log((1-(curve$max_reach/curve$k)^curve$v))/(-curve$g1)
max_reach_sp[max_reach_sp==Inf]=max.level
curve$max_reach_sp=max_reach_sp
shell1=merge(shell[,c("shell_num","max_spend","min_spend"),with=F],curve[,c("shell_num","max_reach_sp","inf_point1"),with=F],by="shell_num",all.x=T)
max_spend=pmin(shell1$max_spend,shell1$max_reach_sp)
shell2=data.table(shell_num=shell1$shell_num,max_spend=max_spend)
min_spend=pmax(shell1$min_spend,shell1$inf_point1)
shell2=data.table(shell2,min_spend=min_spend,inf_point1=shell1$inf_point1,min_spend_t=shell1$min_spend)
shell=merge(shell[,!c("max_spend","min_spend"),with=F],shell2,by="shell_num",all.x=T)
# merge curve with shell
shell$sp_current=shell$min_spend
curve=merge(curve, shell[,c("shell_num","sp_current"),with=F],
by="shell_num",all.x=T)
# calculate spend inc
spend_inc=10
loop=floor((budget-sum(shell$sp_current))/spend_inc)
if (loop >2000) spend_inc=floor((budget-sum(shell$sp_current))/2000)
# flag
shell$flag=rep(0,nrow(shell))
shell$flag[(shell$sp_current+spend_inc)>shell$max_spend]=1
curve=merge(curve,shell[,c("shell_num","flag"),with=F],by="shell_num",all.x=T)
# backup curve and shell
curve1=curve
shell1=shell
# check some posibble errors
if (sum(shell$sp_current)>budget)
stop("Error Message: Total current spend is greater than total planed budget.")
if (sum(shell$sp_current>shell$max_spend) !=0)
stop("Error Message: One or more media channel's spend is greater than its maximum constrain.")
#######################################################################################
# OPTM initialization MAX
#######################################################################################
print("Optimization (MAX) Starting")
# compute the number of iteration
loop=floor((budget-sum(shell$sp_current))/spend_inc)
if ((budget-sum(shell$sp_current))%%spend_inc!=0) {
sp_inc_last=budget-sum(shell$sp_current)-loop*spend_inc
loop=loop+1
}else{
sp_inc_last=spend_inc
}
# compute initial gross reach
curve$r_grs=curve$k*((1-exp(-curve$g1*curve$sp_current))^curve$v)
# max optm loop
if (loop!=0){
for (i in 1:loop){
#i=2
if (i%%50==0) print(paste("Optimization (MAX): ",round(100*i/loop,digit=1),"% completed. ",Sys.time(),sep=""))
if (i==loop) {
sp_inc=sp_inc_last
} else{
sp_inc=spend_inc
}
# compute spend_next
curve$sp_next[curve$flag==0]=curve$sp_current[curve$flag!=1]+sp_inc
# compute gross reach next
curve$r_grs_next[curve$flag==0]=curve$k[curve$flag==0]*
((1-exp(-curve$g1[curve$flag==0]*curve$sp_next[curve$flag==0]))^curve$v[curve$flag==0])
curve$r_grs_next[curve$flag==1]=curve$r_grs[curve$flag==1]
########################################################
# determine where to put incremental budget
########################################################
inc.grs=curve$r_grs_next-curve$r_grs
if (max(inc.grs)<=0) break
index=which.max(inc.grs)
curve$sp_current[index]=curve$sp_current[index]+sp_inc
curve$r_grs[index]=curve$r_grs_next[index]
# update the current spend in shell
index.shell=shell$shell_num==curve$shell_num[index]
shell$sp_current[index.shell]=shell$sp_current[index.shell]+sp_inc
# check max constrain and flag if necessary
if ((shell$sp_current[index.shell]+sp_inc)>shell$max_spend[index.shell]) {
shell$flag[index.shell]=1
max.shell.num=shell$shell_num[index.shell]
curve$flag[curve$shell_num==max.shell.num]=1
}
if (i==loop) print("Optimization (MAX) is completed.")
}
if (max(inc.grs)<=0) print("Optimization (MAX) couldn't allocate all the budget.")
}
# second round optm for s curve
index=shell[sp_current==inf_point1&inf_point1!=0,shell_num]
if (length(index)!=0){
shell$sp_current[shell$shell_num %in% index]=0
curve$sp_current[curve$shell_num %in% index]=0
# compute the number of iteration
loop=floor((budget-sum(shell$sp_current))/spend_inc)
if ((budget-sum(shell$sp_current))%%spend_inc!=0) {
sp_inc_last=budget-sum(shell$sp_current)-loop*spend_inc
loop=loop+1
}else{
sp_inc_last=spend_inc
}
# max optm loop
if (loop!=0){
for (i in 1:loop){
#i=2
if (i%%50==0) print(paste("Optimization (MAX): ",round(100*i/loop,digit=1),"% completed. ",Sys.time(),sep=""))
if (i==loop) {
sp_inc=sp_inc_last
} else{
sp_inc=spend_inc
}
# compute spend_next
curve$sp_next[curve$flag==0]=curve$sp_current[curve$flag!=1]+sp_inc
# compute gross reach next
curve$r_grs_next[curve$flag==0]=curve$k[curve$flag==0]*
((1-exp(-curve$g1[curve$flag==0]*curve$sp_next[curve$flag==0]))^curve$v[curve$flag==0])
curve$r_grs_next[curve$flag==1]=curve$r_grs[curve$flag==1]
########################################################
# determine where to put incremental budget
########################################################
inc.grs=curve$r_grs_next-curve$r_grs
if (max(inc.grs)<=0) break
index=which.max(inc.grs)
curve$sp_current[index]=curve$sp_current[index]+sp_inc
curve$r_grs[index]=curve$r_grs_next[index]
# update the current spend in shell
index.shell=shell$shell_num==curve$shell_num[index]
shell$sp_current[index.shell]=shell$sp_current[index.shell]+sp_inc
# check max constrain and flag if necessary
if ((shell$sp_current[index.shell]+sp_inc)>shell$max_spend[index.shell]) {
shell$flag[index.shell]=1
max.shell.num=shell$shell_num[index.shell]
curve$flag[curve$shell_num==max.shell.num]=1
}
if (i==loop) print("Optimization (MAX) is completed.")
}
if (max(inc.grs)<=0) print("Optimization (MAX) couldn't allocate all the budget.")
}
}
# roll up result
# reset the min_spend in the shell to the true min spend
shell$min_spend=shell$min_spend_t
curve.rollup=curve[,list(r_grs=sum(r_grs)),by=c(ex.shell.rollup$var)]
result.max.shell=merge(shell,curve.rollup,by=c(ex.shell.rollup$var),all=T)
# compute max scenario
for.max=result.max.shell[order(-r_grs)]
for.max$r_net=rep(0,nrow(for.max))
#r_grs_lag=c(for.max$r_grs[2:length(for.max$r_grs)],0)
for.max$r_net[1]=for.max$r_grs[1]-for.max$r_grs[2]
r_net_max_total=max(for.max$r_grs)
r_dupe_max_total=max(for.max$r_grs[for.max$r_grs!=max(for.max$r_grs)])
for.max=for.max[order(media_num)]
for.max$r_dupe=for.max$r_grs-for.max$r_net #zx
#######################################################################################
# OPTM initialization RANDOM
#######################################################################################
print("Optimization (RANDOM) Starting")
# recover curve and shell
curve=curve1
shell=shell1
# compute the number of iteration
loop=floor((budget-sum(shell$sp_current))/spend_inc)
if ((budget-sum(shell$sp_current))%%spend_inc!=0) {
sp_inc_last=budget-sum(shell$sp_current)-loop*spend_inc
loop=loop+1
}else{
sp_inc_last=spend_inc
}
# compute initial gross reach
curve$r_grs=curve$k*
((1-exp(-curve$g1*curve$sp_current))^curve$v)
# random optm loop
if (loop!=0){
for (i in 1:loop){
#i=1
if (i%%50==0) print(paste("Optimization (RANDOM): ",round(100*i/loop,digit=1),"% completed. ",Sys.time(),sep=""))
if (i==loop) {
sp_inc=sp_inc_last
} else{
sp_inc=spend_inc
}
# compute spend_next
curve$sp_next[curve$flag==0]=curve$sp_current[curve$flag!=1]+sp_inc
# compute gross reach next
curve$r_grs_next[curve$flag==0]=curve$k[curve$flag==0]*
((1-exp(-curve$g1[curve$flag==0]*curve$sp_next[curve$flag==0]))^curve$v[curve$flag==0])
curve$r_grs_next[curve$flag==1]=curve$r_grs[curve$flag==1]
########################################################
# determine where to put incremental budget
########################################################
inc.grs=curve$r_grs_next-curve$r_grs
if (max(inc.grs)<=0) break
n=nrow(ex.media[ex.media$flag_media==1,])
row.curve=1:n
r.net.total=rep(0,length(curve$r_grs))
for( k in 1:length(curve$r_grs)) {
if (curve$flag[k] !=1){
r_grs=curve$r_grs
r_grs[k]=curve$r_grs_next[k]
r.dupe.box=rep(0,n)
for (j in 2:n){
#j=2
combo=combn(row.curve,j)
r.combo=matrix(r_grs[combo],nr=j)
r.dupe.box[j]=sum(apply(r.combo,2,prod))
}
r.net.total[k]=sum(r_grs)+sum((-1)^(1:n+1)*r.dupe.box)
}
}
index=which.max(r.net.total)
curve$sp_current[index]=curve$sp_current[index]+sp_inc
curve$r_grs[index]=curve$r_grs_next[index]
# update the current spend in shell
index.shell=shell$shell_num==curve$shell_num[index]
shell$sp_current[index.shell]=shell$sp_current[index.shell]+sp_inc
# check max constrain and flag if necessary
if ((shell$sp_current[index.shell]+sp_inc)>shell$max_spend[index.shell]) {
shell$flag[index.shell]=1
max.shell.num=shell$shell_num[index.shell]
curve$flag[curve$shell_num==max.shell.num]=1
}
if (i==loop) print("Optimization (RANDOM) is completed.")
}
if (max(inc.grs)<=0) print("Optimization (RANDOM) couldn't allocate all the budget.")
}
# second round optm for s curve
index=shell[sp_current==inf_point1&inf_point1!=0,shell_num]
if (length(index)!=0){
shell$sp_current[shell$shell_num %in% index]=0
curve$sp_current[curve$shell_num %in% index]=0
# compute the number of iteration
loop=floor((budget-sum(shell$sp_current))/spend_inc)
if ((budget-sum(shell$sp_current))%%spend_inc!=0) {
sp_inc_last=budget-sum(shell$sp_current)-loop*spend_inc
loop=loop+1
}else{
sp_inc_last=spend_inc
}
# random optm loop
if (loop!=0){
for (i in 1:loop){
#i=1
if (i%%50==0) print(paste("Optimization (RANDOM): ",round(100*i/loop,digit=1),"% completed. ",Sys.time(),sep=""))
if (i==loop) {
sp_inc=sp_inc_last
} else{
sp_inc=spend_inc
}
# compute spend_next
curve$sp_next[curve$flag==0]=curve$sp_current[curve$flag!=1]+sp_inc
# compute gross reach next
curve$r_grs_next[curve$flag==0]=curve$k[curve$flag==0]*
((1-exp(-curve$g1[curve$flag==0]*curve$sp_next[curve$flag==0]))^curve$v[curve$flag==0])
curve$r_grs_next[curve$flag==1]=curve$r_grs[curve$flag==1]
########################################################
# determine where to put incremental budget
########################################################
inc.grs=curve$r_grs_next-curve$r_grs
if (max(inc.grs)<=0) break
n=nrow(ex.media[ex.media$flag_media==1,])
row.curve=1:n
r.net.total=rep(0,length(curve$r_grs))
for( k in 1:length(curve$r_grs)) {
if (curve$flag[k] !=1){
r_grs=curve$r_grs
r_grs[k]=curve$r_grs_next[k]
r.dupe.box=rep(0,n)
for (j in 2:n){
#j=2
combo=combn(row.curve,j)
r.combo=matrix(r_grs[combo],nr=j)
r.dupe.box[j]=sum(apply(r.combo,2,prod))
}
r.net.total[k]=sum(r_grs)+sum((-1)^(1:n+1)*r.dupe.box)
}
}
index=which.max(r.net.total)
curve$sp_current[index]=curve$sp_current[index]+sp_inc
curve$r_grs[index]=curve$r_grs_next[index]
# update the current spend in shell
index.shell=shell$shell_num==curve$shell_num[index]
shell$sp_current[index.shell]=shell$sp_current[index.shell]+sp_inc
# check max constrain and flag if necessary
if ((shell$sp_current[index.shell]+sp_inc)>shell$max_spend[index.shell]) {
shell$flag[index.shell]=1
max.shell.num=shell$shell_num[index.shell]
curve$flag[curve$shell_num==max.shell.num]=1
}
if (i==loop) print("Optimization (RANDOM) is completed.")
}
if (max(inc.grs)<=0) print("Optimization (RANDOM) couldn't allocate all the budget.")
}
}
# roll up result
# reset the min_spend in the shell to the true min spend
shell$min_spend=shell$min_spend_t
curve.rollup=curve[,list(r_grs=sum(r_grs)),by=c(ex.shell.rollup$var)]
result.random.shell=merge(shell,curve.rollup,by=c(ex.shell.rollup$var),all=T)
# compute random scenario
for.ran=result.random.shell[order(media_num)]
no.media=1:nrow(ex.media[ex.media$flag_media==1,])
r.dupe.box=rep(0,nrow(ex.media[ex.media$flag_media==1,]))
r.dupe.box.media=matrix(0,nr=nrow(ex.media[ex.media$flag_media==1,]),
nc=nrow(ex.media[ex.media$flag_media==1,]),
dimnames=list(for.ran$media_num,
1:nrow(ex.media[ex.media$flag_media==1,])))
r.dupe.box.media[,1]=for.ran$r_grs
for (j in 2:nrow(ex.media[ex.media$flag_media==1,])){
#j=2
combo=combn(no.media,j)
r.combo=matrix(for.ran$r_grs[combo],nr=j)
r.combo.prod=apply(r.combo,2,prod)
r.combo.tran=data.table(t(rbind(combo,r.combo.prod)))
r.combo.melt=data.table(melt(r.combo.tran,id="r.combo.prod"))
r.combo.meida=r.combo.melt[,list(r.prod=sum(r.combo.prod)),by=c("value")]
r.dupe.box.media[,j]=r.combo.meida$r.prod
r.dupe.box[j]=sum(r.combo.prod)
}
r_net_ran_total=sum(for.ran$r_grs)+sum((-1)^(1:nrow(ex.media[ex.media$flag_media==1,])+1)*r.dupe.box)
for.ran$r_net=apply(sweep(r.dupe.box.media,MARGIN=2,(-1)^(1:nrow(ex.media[ex.media$flag_media==1,])+1),"*"),
1,sum)
for.ran$r_dupe=for.ran$r_grs-for.ran$r_net
r_dupe_ran_total=r_net_ran_total-sum(for.ran$r_net) #zx
# compute the final dupe factor
dupe=melt(ex.dupe,id.vars="Media")
dupe=dupe[(!is.na(dupe$value)),]
dupe=merge(dupe,ex.media,by="Media",all.x=T)
dupe=dupe[dupe$flag_media==1,]
setnames(dupe,"Media","Media1")
setnames(dupe,"variable","Media")
dupe=merge(dupe,ex.media,by="Media",all.x=T)
dupe=dupe[dupe$flag_media.y==1,]
dupe.temp=dupe[,c("Media1","media_num.y","value")]
setnames(dupe.temp,"Media1","Media")
setnames(dupe.temp,"media_num.y","media_num.x")
dupe.temp1=rbind(dupe[,c("Media","media_num.x","value")],dupe.temp)
setnames(dupe.temp1,"media_num.x","media_num")
dupe.temp1=data.table(dupe.temp1)
dupe.media=dupe.temp1[,list(dupe=mean(value)),by=c("media_num")]
# rescale spend, net reach and dupe reach
for.max1=for.max
setnames(for.max1,"sp_current","sp_max")
setnames(for.max1,"r_net","r_net_max")
setnames(for.max1,"r_dupe","r_dupe_max")#zx
for.max1=for.max1[,!c("flag","r_grs"),with=F]
for.ran1=for.ran[,!c("media_num","shell_num","max_spend","min_spend","flag",
"r_grs"),with=F]
setnames(for.ran1,"sp_current","sp_ran")
setnames(for.ran1,"r_net","r_net_ran")
setnames(for.ran1,"r_dupe","r_dupe_ran")#zx
final=merge(for.max1,for.ran1,by="Media",all=T)
final=merge(final,dupe.media,by="media_num",all.x=T)
# re-calc actual budget
budget=min(sum(final$sp_max),sum(final$sp_ran))
# net reach
if (r_net_max_total>=r_net_ran_total){
min=final$r_net_ran
max=final$r_net_max
}else{
max=final$r_net_ran
min=final$r_net_max
}
r_net_adj=min+(1-final$dupe)*(max-min)
final$r_net_adj=r_net_adj
# spend
if (r_net_max_total>=r_net_ran_total){
min=final$sp_ran
max=final$sp_max
}else{
max=final$sp_ran
min=final$sp_max
}
sp_adj=min+(1-final$dupe)*(max-min)
final$sp_adj=sp_adj
# rescale spend
final=merge(final,curve[,c("media_num","k","g1","v","cpp"),with=F],by=c("media_num"),all.x=T)
if(sum(final$sp_adj)!=budget){
final$sp_adj=final$sp_adj+((budget-sum(final$sp_adj))*final$sp_adj/sum(final$sp_adj))
}
final$flag_min=final$sp_adj<final$min_spend
final$flag_max=final$sp_adj>final$max_spend
final$flag=final$flag_min+final$flag_max
final$sp_adj[final$flag==1]=
(final$min_spend*final$flag_min+final$flag_max*final$max_spend)[final$flag==1]
if(sum(final$sp_adj)!=budget){
final$sp_adj[final$flag!=1]=final$sp_adj[final$flag!=1]+
((budget-sum(final$sp_adj))*final$sp_adj[final$flag!=1]/sum(final$sp_adj[final$flag!=1]))
}
final$allo=final$sp_adj/budget
final$r_grs=final$k*((1-exp(-final$g1*final$sp_adj))^final$v)
final$grp=final$sp_adj/final$cpp
#total net and dupe reach
r_net_adj_total=(1-mean(dupe.temp1$value))*(max(c(r_net_max_total,r_net_ran_total))-
min(c(r_net_max_total,r_net_ran_total)))+min(c(r_net_max_total,r_net_ran_total))
r_dupe_adj_total=r_net_adj_total-sum(final$r_net_adj)
final.total=data.table(r_net_max_total,r_dupe_max_total,r_net_ran_total,
r_dupe_ran_total,r_net_adj_total,r_dupe_adj_total)
# for output dupe matrix
index=ex.dupe$Media %in% ex.media$Media[ex.media$flag_media==1]
dupe=ex.dupe[index]
dupe=dupe[,c(T,index),with=F]
dupe1=plyr::join(dupe,final[,c("Media","r_grs"),with=F],by=c("Media"),type="left")
dupe.m1=matrix(rep(dupe1$r_grs,nrow(dupe)),nr=nrow(dupe),byrow=F)#zx
dupe.m2=matrix(rep(dupe1$r_grs,nrow(dupe)),nr=nrow(dupe),byrow=T)#zx
dupe.m3=data.matrix(dupe[,!"Media",with=F])
dupe.min=dupe.m1*dupe.m2
dupe.max=matrix(0,nr=nrow(dupe.m1),nc=ncol(dupe.m1))
for (i in 1:nrow(dupe.m1)){
index=which(dupe.m1[i,]<dupe.m2[i,])
dupe.max[i,]=dupe.m2[i,]
dupe.max[i,][index]=dupe.m1[i,][index]
}
dupe.final=dupe.min+dupe.m3*(dupe.max-dupe.min)
dupe.final=cbind(dupe$Media,dupe.final)
colnames(dupe.final)[1]="Media"
# for output
for.output=data.frame(final[,c("Media","sp_adj","allo","r_grs","r_net_adj","grp"),with=F])
# several adjustments for two channel scenario
r_n=for.output$r_grs
if(sum(r_n!=0)==2){
index=dupe.final[,-1]!=0
index[is.na(index)]=F
r_dupe_adj_total=as.numeric(dupe.final[,-1][(!is.na(dupe.final[,-1]))&index])
r_net_adj_total=sum(for.output$r_grs)-r_dupe_adj_total
for.output$r_net_adj[r_n!=0]=for.output$r_grs[r_n!=0]-r_dupe_adj_total
}
x=c("Total",apply(for.output[,-1],2,sum))
x[names(for.output)=="r_net_adj"]=r_net_adj_total
for.output=rbind(for.output,c("All other duplicated reach",c("","","",r_dupe_adj_total,"")))
for.output=rbind(for.output,x)
names(for.output)=c("Media","Budget","Allocation","Gross reach","Net reach","Total 30s GRPs")
for.output.t=data.frame(t(for.output))
names(for.output.t)=for.output$Media
for.output.t=data.frame(for.output.t[dupe.final[,"Media"]],for.output.t[c("All other duplicated reach","Total")])
end=Sys.time()-start
print(paste("Modeling time: ",round(end[[1]],digit=2),attr(end,"units"),sep=""))
write.table(for.output.t,"output_alloc_net_net.csv",col.names = F,sep=",")
write.csv(dupe.final,"output_dupe_net_net.csv",row.names=F)
View(for.output.t)
